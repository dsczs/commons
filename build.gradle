apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing' //使用signing plugin做数字签名

group = 'com.github.penggle'
version = '1.0.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

ext.versions = [
	junit: '4.11',
	joda: '2.3',
	slf4j: '1.7.7',
	logback: '1.1.2',
	protostuff: '1.0.8',
	quartz: '2.2.1',
	jedis: '2.6.2',
	shiro: '1.2.3',
	httpclient: '4.3.4',
	jackson: '2.5.1',
	mybatis: '3.2.7',
	mybatisSpring: '1.2.2',
	mybatisEx: '1.0.0',
	spring: '4.1.4.RELEASE',
	springDataRedis: '1.4.2.RELEASE',
	servlet: '3.1.0'
]

[compileJava, javadoc, compileTestJava]*.options*.encoding = "UTF-8"

jar {
    manifest {
        attributes 'Implementation-Title': 'commons', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile(
    	"joda-time:joda-time:${versions.joda}",
	    "org.slf4j:slf4j-api:${versions.slf4j}",
	    "ch.qos.logback:logback-core:${versions.logback}",
	    "ch.qos.logback:logback-classic:${versions.logback}",
		"redis.clients:jedis:${versions.jedis}",
		"org.apache.shiro:shiro-core:${versions.shiro}",
		"org.apache.shiro:shiro-web:${versions.shiro}",
		"org.apache.shiro:shiro-ehcache:${versions.shiro}",
		"org.apache.shiro:shiro-spring:${versions.shiro}",
		"org.apache.shiro:shiro-quartz:${versions.shiro}",
		"org.quartz-scheduler:quartz:${versions.quartz}",
	    "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
	    "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
	    "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
	    "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${versions.jackson}",
	    "org.apache.httpcomponents:httpclient:${versions.httpclient}",
		"com.dyuproject.protostuff:protostuff-core:${versions.protostuff}",
		"com.dyuproject.protostuff:protostuff-runtime:${versions.protostuff}",
		"com.dyuproject.protostuff:protostuff-api:${versions.protostuff}",
		"com.dyuproject.protostuff:protostuff-collectionschema:${versions.protostuff}",
		"org.mybatis:mybatis:${versions.mybatis}",
		"org.mybatis:mybatis-spring:${versions.mybatisSpring}",
		"com.github.penggle:mybatis-ex:${versions.mybatisEx}",
		
	    "org.springframework:spring-core:${versions.spring}",
	    "org.springframework:spring-aop:${versions.spring}",
	    "org.springframework:spring-aspects:${versions.spring}",
	    "org.springframework:spring-beans:${versions.spring}",
	    "org.springframework:spring-context:${versions.spring}",
	    "org.springframework:spring-context-support:${versions.spring}",
	    "org.springframework:spring-jdbc:${versions.spring}",
	    "org.springframework:spring-expression:${versions.spring}",
	    "org.springframework:spring-tx:${versions.spring}",
		"org.springframework:spring-web:${versions.spring}",
		"org.springframework:spring-webmvc:${versions.spring}",
		"org.springframework.data:spring-data-redis:${versions.springDataRedis}",
		
		"javax.servlet:javax.servlet-api:${versions.servlet}"
    )
	
    testCompile(
		"junit:junit:${versions.junit}",
		"org.springframework:spring-test:${versions.spring}"
	)
}

//参见Part 2， 为项目生成**.jar/**-javadoc.jar/**-sources.jar  
task javadocJar(type: Jar, dependsOn: javadoc) {  
    classifier = 'javadoc'  
    from 'build/docs/javadoc'  
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

//为所有的jar包做数字签名
signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			//为Pom文件做数字签名
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
  
			//指定项目部署到的中央库地址，UserName和Password就是Part 1中注册的账号,
			/**
			 * 看jira中的comment,snapshot和release版本的提交地址是不一样的(注意版本号后面是否带-SNAPSHOT),否则报400
			 * Configuration has been prepared, now you can:
			 * 		Deploy snapshot artifacts into repository https://oss.sonatype.org/content/repositories/snapshots
			 * 		Deploy release artifacts into the staging repository https://oss.sonatype.org/service/local/staging/deploy/maven2
			 * 		Promote staged artifacts into repository 'Releases'
			 * 		Download snapshot and release artifacts from group https://oss.sonatype.org/content/groups/public
			 * 		Download snapshot, release and staged artifacts from staging group https://oss.sonatype.org/content/groups/staging
			 */
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			//构造项目的Pom文件，参见Part 2中Pom文件的规范，不要遗漏必填项
			pom.project {
				name project.name
				packaging 'jar'
				description 'commons is a little java tool to make your development easier in your work.'
				url 'https://github.com/penggle/commons'
  
				scm {
					url 'scm:git@github.com:penggle/commons.git'
					connection 'scm:git@github.com:penggle/commons.git'
					developerConnection 'git@github.com:penggle/commons.git'
				}
  
				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
					}
				}
  
				developers {
					developer {
						id 'pengpeng'
						name 'Peng Peng'
					}
				}
			}
		}
	}
}